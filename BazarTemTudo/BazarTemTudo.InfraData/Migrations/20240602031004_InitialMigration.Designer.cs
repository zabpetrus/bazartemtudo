// <auto-generated />
using System;
using BazarTemTudo.InfraData.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BazarTemTudo.InfraData.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20240602031004_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.Checkout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataDespacho")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Atualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Registro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Pedido_ClienteId")
                        .HasColumnType("uuid");

                    b.Property<int>("Pedido_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Status_Despacho")
                        .HasColumnType("integer");

                    b.Property<decimal>("Total_Pedido")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Pedido_ClienteId");

                    b.ToTable("Checkout", (string)null);
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.Clientes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Data_Atualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Registro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.DespachoMercadorias", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data_Atualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Liberacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Registro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status_Entrega")
                        .HasColumnType("integer");

                    b.Property<Guid>("TransportadoraId")
                        .HasColumnType("uuid");

                    b.Property<int>("Transportadora_ID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TransportadoraId");

                    b.ToTable("DespachoMercadorias", (string)null);
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Complemento1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Complemento2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Data_Atualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Registro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Numero")
                        .HasColumnType("integer");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Enderecos", (string)null);
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.Estoque", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data_Atualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Registro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Estoque_Minimo")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Produtos_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.ToTable("Estoque", (string)null);
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.Fornecedores", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Data_Atualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Registro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Endereco_FornecedorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Endereco_ID")
                        .HasColumnType("integer");

                    b.Property<string>("Nome_Fornecedor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Endereco_FornecedorId");

                    b.ToTable("Fornecedores", (string)null);
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.ItensPedidos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data_Atualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Registro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Pedidos_ID")
                        .HasColumnType("integer");

                    b.Property<decimal>("Preco")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Produtos_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer");

                    b.Property<bool>("disponivel_estoque")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ItensPedidos", (string)null);
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.NotaFiscal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data_Atualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Emissao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Registro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Pedidos_ID")
                        .HasColumnType("integer");

                    b.Property<decimal>("Valor_Total")
                        .HasColumnType("numeric");

                    b.Property<Guid>("pedido_ClienteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("pedido_ClienteId");

                    b.ToTable("NotaFiscal", (string)null);
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.Pedidos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Clientes_IdId")
                        .HasColumnType("uuid");

                    b.Property<string>("Codigo_Pedido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Data_Atualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Pedido")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Registro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Endereco_EntregaId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status_Pedido")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Clientes_IdId");

                    b.HasIndex("Endereco_EntregaId");

                    b.ToTable("Pedidos", (string)null);
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.PerfilUsuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Data_Atualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Registro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Perfil_Usuario_ID")
                        .HasColumnType("integer");

                    b.Property<Guid>("usuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("usuarioId");

                    b.ToTable("PerfilUsuario", (string)null);
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.Produtos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data_Atualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Registro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Fornecedor_ID")
                        .HasColumnType("integer");

                    b.Property<decimal>("Frete_Produto")
                        .HasColumnType("numeric");

                    b.Property<string>("Nome_Produto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UPC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("Produtos", (string)null);
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.RequisicaoCompra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data_Atualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Emissao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Registro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Fornecedor_ID")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Produto_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer");

                    b.Property<int>("Status_Pedido")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Total_Compra")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("RequisicaoCompra", (string)null);
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.Transportadoras", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("CustoFrete")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Data_Atualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Registro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NomeTransportadora")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TipoServico")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Transportadoras", (string)null);
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.Usuarios", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Data_Atualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Data_Registro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Endereco_ID")
                        .HasColumnType("integer");

                    b.Property<Guid>("Endereco_UsuarioId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Endereco_UsuarioId");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("Flunt.Notifications.Notification", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.Checkout", b =>
                {
                    b.HasOne("BazarTemTudo.Domain.Entities.Pedidos", "Pedido_Cliente")
                        .WithMany()
                        .HasForeignKey("Pedido_ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido_Cliente");
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.DespachoMercadorias", b =>
                {
                    b.HasOne("BazarTemTudo.Domain.Entities.Transportadoras", "Transportadora")
                        .WithMany()
                        .HasForeignKey("TransportadoraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transportadora");
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.Estoque", b =>
                {
                    b.HasOne("BazarTemTudo.Domain.Entities.Produtos", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.Fornecedores", b =>
                {
                    b.HasOne("BazarTemTudo.Domain.Entities.Endereco", "Endereco_Fornecedor")
                        .WithMany()
                        .HasForeignKey("Endereco_FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco_Fornecedor");
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.ItensPedidos", b =>
                {
                    b.HasOne("BazarTemTudo.Domain.Entities.Pedidos", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BazarTemTudo.Domain.Entities.Produtos", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.NotaFiscal", b =>
                {
                    b.HasOne("BazarTemTudo.Domain.Entities.Pedidos", "pedido_Cliente")
                        .WithMany()
                        .HasForeignKey("pedido_ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pedido_Cliente");
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.Pedidos", b =>
                {
                    b.HasOne("BazarTemTudo.Domain.Entities.Clientes", "Clientes_Id")
                        .WithMany()
                        .HasForeignKey("Clientes_IdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BazarTemTudo.Domain.Entities.Endereco", "Endereco_Entrega")
                        .WithMany()
                        .HasForeignKey("Endereco_EntregaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clientes_Id");

                    b.Navigation("Endereco_Entrega");
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.PerfilUsuario", b =>
                {
                    b.HasOne("BazarTemTudo.Domain.Entities.Usuarios", "usuario")
                        .WithMany()
                        .HasForeignKey("usuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.Produtos", b =>
                {
                    b.HasOne("BazarTemTudo.Domain.Entities.Fornecedores", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.RequisicaoCompra", b =>
                {
                    b.HasOne("BazarTemTudo.Domain.Entities.Fornecedores", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BazarTemTudo.Domain.Entities.Produtos", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("BazarTemTudo.Domain.Entities.Usuarios", b =>
                {
                    b.HasOne("BazarTemTudo.Domain.Entities.Endereco", "Endereco_Usuario")
                        .WithMany()
                        .HasForeignKey("Endereco_UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco_Usuario");
                });
#pragma warning restore 612, 618
        }
    }
}
